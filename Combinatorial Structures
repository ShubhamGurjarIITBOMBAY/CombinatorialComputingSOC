#Different types of structure in combinatorics

#Combinations
'''
for this we will first see that  how to make the possible subsets out of a given set set of numbers then from that we will take out the sets of given size depending on the combination we want
'''

def subset(i,arr,sol,main):
    if i==arr.size():
        main.append(sol)
        return
    sol.append(arr[i])
    subset(i+1,arr,sol,main)
    arr.pop()
    subset(i+1,arr,sol,main)

#from this now we can take the array of size r for the function def(n,r)
def permutation(arr):
    main=[]

    for i in range(len(arr)):
        sol=[]
        
        if i==arr.size:
            return main
        sol.append(arr[i])
        rem=arr[:i]+arr[i+1:]
        main.append(permutation(rem).append(sol))

# make the compositions
    
def composition(n,compo,main):
    if n==0:
        main.append((compo))
    else:
        for i in range(n,0,-1):
            composition(n-i,compo+[i],main)
